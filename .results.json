{
  "stats": {
    "suites": 4,
    "tests": 6,
    "passes": 2,
    "pending": 0,
    "failures": 4,
    "start": "2024-03-21T17:35:51.689Z",
    "end": "2024-03-21T17:35:52.222Z",
    "duration": 533
  },
  "tests": [
    {
      "title": "is set as Scuber",
      "fullTitle": "index.js companyName is set as Scuber",
      "duration": 3,
      "currentRetry": 0,
      "err": {
        "message": "expected 'scuber' to equal 'Scuber'",
        "showDiff": true,
        "actual": "scuber",
        "expected": "Scuber",
        "stack": "AssertionError: expected 'scuber' to equal 'Scuber'\n    at Context.<anonymous> (test/indexTest.js:11:30)"
      }
    },
    {
      "title": "is defined as a const",
      "fullTitle": "index.js companyName is defined as a const",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "is declared as equal to Chelsea",
      "fullTitle": "index.js mostProfitableNeighborhood is declared as equal to Chelsea",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "ReferenceError: mostProfitableNeighborhood is not defined\n    at Context.<anonymous> (test/indexTest.js:21:14)",
        "message": "mostProfitableNeighborhood is not defined"
      }
    },
    {
      "title": "is defined using let",
      "fullTitle": "index.js mostProfitableNeighborhood is defined using let",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "Expected mostProfitableNeighborhood to be defined using let: expected '// Code your solution in this file!\\nconst companyName = \"scuber\";\\n\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\nlet mostProfitableNeiborhood = \"chelsea\";\\n\\nlet companyCeo = \"susan smith\";' to match /let mostProfitableNeighborhood/",
        "showDiff": false,
        "actual": "// Code your solution in this file!\nconst companyName = \"scuber\";\n\nit('is set as Scuber', function () {\n    expect(companyName).to.equal('Scuber');\n  });\n\nlet mostProfitableNeiborhood = \"chelsea\";\n\nlet companyCeo = \"susan smith\";",
        "stack": "AssertionError: Expected mostProfitableNeighborhood to be defined using let: expected '// Code your solution in this file!\\nconst companyName = \"scuber\";\\n\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\nlet mostProfitableNeiborhood = \"chelsea\";\\n\\nlet companyCeo = \"susan smith\";' to match /let mostProfitableNeighborhood/\n    at Context.<anonymous> (test/indexTest.js:25:21)"
      }
    },
    {
      "title": "is declared as equal to Susan Smith",
      "fullTitle": "index.js companyCeo is declared as equal to Susan Smith",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "ReferenceError: companyCeo is not defined\n    at Context.<anonymous> (test/indexTest.js:31:14)",
        "message": "companyCeo is not defined"
      }
    },
    {
      "title": "is defined using let",
      "fullTitle": "index.js companyCeo is defined using let",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    }
  ],
  "pending": [],
  "failures": [
    {
      "title": "is set as Scuber",
      "fullTitle": "index.js companyName is set as Scuber",
      "duration": 3,
      "currentRetry": 0,
      "err": {
        "message": "expected 'scuber' to equal 'Scuber'",
        "showDiff": true,
        "actual": "scuber",
        "expected": "Scuber",
        "stack": "AssertionError: expected 'scuber' to equal 'Scuber'\n    at Context.<anonymous> (test/indexTest.js:11:30)"
      }
    },
    {
      "title": "is declared as equal to Chelsea",
      "fullTitle": "index.js mostProfitableNeighborhood is declared as equal to Chelsea",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "ReferenceError: mostProfitableNeighborhood is not defined\n    at Context.<anonymous> (test/indexTest.js:21:14)",
        "message": "mostProfitableNeighborhood is not defined"
      }
    },
    {
      "title": "is defined using let",
      "fullTitle": "index.js mostProfitableNeighborhood is defined using let",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "Expected mostProfitableNeighborhood to be defined using let: expected '// Code your solution in this file!\\nconst companyName = \"scuber\";\\n\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\nlet mostProfitableNeiborhood = \"chelsea\";\\n\\nlet companyCeo = \"susan smith\";' to match /let mostProfitableNeighborhood/",
        "showDiff": false,
        "actual": "// Code your solution in this file!\nconst companyName = \"scuber\";\n\nit('is set as Scuber', function () {\n    expect(companyName).to.equal('Scuber');\n  });\n\nlet mostProfitableNeiborhood = \"chelsea\";\n\nlet companyCeo = \"susan smith\";",
        "stack": "AssertionError: Expected mostProfitableNeighborhood to be defined using let: expected '// Code your solution in this file!\\nconst companyName = \"scuber\";\\n\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\nlet mostProfitableNeiborhood = \"chelsea\";\\n\\nlet companyCeo = \"susan smith\";' to match /let mostProfitableNeighborhood/\n    at Context.<anonymous> (test/indexTest.js:25:21)"
      }
    },
    {
      "title": "is declared as equal to Susan Smith",
      "fullTitle": "index.js companyCeo is declared as equal to Susan Smith",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "ReferenceError: companyCeo is not defined\n    at Context.<anonymous> (test/indexTest.js:31:14)",
        "message": "companyCeo is not defined"
      }
    }
  ],
  "passes": [
    {
      "title": "is defined as a const",
      "fullTitle": "index.js companyName is defined as a const",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "is defined using let",
      "fullTitle": "index.js companyCeo is defined using let",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    }
  ]
}